.grid-container Контейнер для гридов. Контейнер нужен для того, что-бы сгрупировать сетку сайта. Используя этот контейнер, мы создаем свою систему координат. Все что будет находится внутри блока с классом .grid-container, будет подчинятся запланированому поведению контейнер-блока. Если не использовать дополнительных классов, класс .grid-container центрирует нашу верстку по центру сайта и допускает максимальную ширину 1170px. Поведение контейнера можно изменять с помощью дополнительных классов.
.grid-container fluid Обтекаемая (адаптивная) верстка. .grid-container создает статический контейнер, добавляя класс fluid изменяем его структуру на обтекаемую.
.grid-container full Займет всю доступную область и блоки будут динамически изменять свою ширину (и высоту) в зависимости от откна браузера. В отличии от .grid-container fluid в контейнере не будет отступов слева и справа.

Для всех типов контейнеров характерно поведение: если область окна не позволяет разместить все содержимое грида, блоки выпадают один под другой не нарушая общую верстку сайта.

.grid-x Горизонтальный грид (выравнивание содержимого блока по горизонтали).
.grid-margin-x Грид с отступами. Будет "просвет" (margin) между блоками
.grid-padding-x Грид с полями. Отступов между блоками не будет, однако внутри блока будут поля (padding).

.grid-y Вертикальный грид (выравнивание содержимого блока по вертикали). Для того, что-бы заработало выравнивание по вертикали у блока должен быть размер height либо для блока объявить два класса:
.grid-y .medium-grid-frame.
.grid-padding-y по аналогии с классами выравнивания по вертикали. Отступы (margin) по вертикали
.grid-margin-y Поля (padding) по вертикали.
Очень важно! Если мы используем grid-y, то в отображение строго фиксируется по высоте окна браузера. Блоки не адаптируются по вертикали и могут наезжать один на другой, а низший блок отобразит только то содержимое, которое влезло в окно.
Можно включить прокрутку в блоке с вертикальным выравниванием добавив класс medium-cell-block-y

Вкладывая друг в друга блоки с классами .grid-x и .grid-y мы формируем верстку интерфейса.

.cell Класс "ячейки". Создает привязку к .grid-x .grid-y и другим классам фреймверка. Используя этот класс при верстке мы будем реализовывать всю мощь и силу ZURB Foundation.

Задавать адаптивный размер (width) блокам-ячейкам (блокам div с классом cell) нужно с помощью классов, например:
.small-4
.large-4
.medium-4
Адаптация по величине окна браузера. Виртуальная градация большой экран; средний экран; маленький экран.

.auto Добавляя класс .auto избавляемся от необходимости высчитывать размер блока.
.shrink Автоматически сжимает класс до минимума (меньше чем класс .small-1).

Манипуляции с отступами по вертикали между блоков проводятся с помощью классов xxx-offset-x (пример large-offset-2)

Стоит обратить отдельное внимание на конструкцию классов
small-up-1 medium-up-4 large-up-8. Значения могут изменяться от 1 до 8.
Класс small-up-x количество блоков .cell в контейнере grid-x при минимальных размерах экрана.
Класс medium-up-x количество блоков .cell в контейнере grid-x при средних размерах экрана.
Класс large-up-x количество блоков .cell при максимальных размерах экрана.
Значения высчитываются исходя из текущих значений родительского блока grid-x

Хелперы для выравнивания блоков:
margin-x
margin-top-x
margin-bottom-x
margin-left-x
margin-right-x
margin-horizontal-x
margin-vertical-x
Такие же хелперы есть и для padding.
Классы хелперы для горизонтального и вертикального выравнивания:
padding-horizontal-x
padding-vertical-x
